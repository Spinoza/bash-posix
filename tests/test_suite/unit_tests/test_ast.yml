easy_word:
        type: "ast print diff"
        command: "word"
        expected:
                stdout: "graph ast\n{\n    root_0 -- word_1\n}"

assignment_w:
        type: "ast print diff"
        command: "word=1"
        expected:
                stdout: "graph ast\n\
                         {\n    root_0 -- word=1_1\n}"

if_word_then_word:
        type: "ast print diff"
        command: "if word1 then cond fi"
        expected:
                stdout: "graph ast\n{\n    root_0 -- if_1\n    if_1 -- condition_2\n    condition_2 -- word1_3\n    if_1 -- then_2\n    then_2 -- cond_3\n}"


if_word_and_word_then:
        type: "ast print diff"
        command: "if word1 && word2 then word3 else word4 fi"
        expected:
                stdout: "graph ast\n{\n    root_0 -- if_1\n    if_1 -- condition_2\n\    condition_2 -- word1_3\n    condition_2 -- logical_and_3\n    condition_2 -- word2_3\n    if_1 -- then_2\n    then_2 -- word3_3\n    if_1 -- else_2\n    else_2 -- word4_3\n}"


complex_case:
        type: "ast print diff"
        command: "while bonsoir || bonnenuit; do thx; if matin; then butwtf; elif jour; then butearly; else verymuch; fi done"
        expected:
                stdout: "graph ast\n{\n    root_0 -- while_1\n    while_1 -- condition_2\n    condition_2 -- bonsoir_3\n    condition_2 -- logical_or_3\n    condition_2 -- bonnenuit_3\n    condition_2 -- semicolon_3\n    while_1 -- do_2\n    do_2 -- thx_3\n    do_2 -- semicolon_3\n    do_2 -- if_3\n    if_3 -- condition_4\n    condition_4 -- matin_5\n    condition_4 -- semicolon_5\n    if_3 -- then_4\n    then_4 -- butwtf_5\n    then_4 -- semicolon_5\n    if_3 -- elif_4\n    elif_4 -- condition_5\n    condition_5 -- jour_6\n    condition_5 -- semicolon_6\n    elif_4 -- then_5\n    then_5 -- butearly_6\n    then_5 -- semicolon_6\n    elif_4 -- else_5\n    else_5 -- verymuch_6\n    else_5 -- semicolon_6\n    root_0 -- done_1\n}"

while_loop:
        type: "ast print diff"
        command: "while true; do foo; sleep 2; done"
        expected:
                stdout: "graph ast\n{\n    root_0 -- while_1\n    while_1 -- condition_2\n    condition_2 -- true_3\n    condition_2 -- semicolon_3\n    while_1 -- do_2\n    do_2 -- foo_3\n    do_2 -- semicolon_3\n    do_2 -- sleep_3\n    do_2 -- 2_3\n    do_2 -- semicolon_3\n}"

for_test:
        type: "ast print diff"
        command: "for a in b; do word; echo ab; done"
        expected:
                stdout: "graph ast\n{\n    root_0 -- for_1\n    for_1 -- condition_2\n    condition_2 -- a_3\n    condition_2 -- in_3\n    condition_2 -- b_3\n    condition_2 -- semicolon_3\n    for_1 -- do_2\n    do_2 -- word_3\n    do_2 -- semicolon_3\n    do_2 -- echo_3\n    do_2 -- ab_3\n    do_2 -- semicolon_3\n}"

pipe_and_logical_or:
        type: "ast print diff"
        command: "echo hello || bye | cat"
        expected:
                stdout: "graph ast\n{\n    root_0 -- echo_1\n    root_0 -- hello_1\n    root_0 -- logical_or_1\n    root_0 -- bye_1\n    root_0 -- pipe_1\n    root_0 -- cat_1\n}"
