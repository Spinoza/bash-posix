easy_word:
        type: "lexer diff"
        command: "word"
        expected:
                stdout: "WORD -> ENDOF -> \n"
                rvalue: 0

assignment_w:
        type: "lexer diff"
        command: "word=1"
        expected:
                stdout: "ASSIGNMENT_W -> ENDOF -> \n"
                rvalue: 0

if_word_then_word:
        type: "lexer diff"
        command: "if word; then cond; fi"
        expected:
                stdout: "IF -> WORD -> SEMICOLON -> THEN -> WORD -> SEMICOLON -> FI -> ENDOF -> \n"
                rvalue: 0

if_word_and_word_then:
        type: "lexer diff"
        command: "if word1 && word2; then word3; else word4; fi"
        expected:
                stdout: "IF -> WORD -> LOGICAL_AND -> WORD -> SEMICOLON -> THEN -> WORD -> SEMICOLON -> ELSE -> WORD -> SEMICOLON -> FI -> ENDOF -> \n"
                rvalue: 0

complex_case:
        type: "lexer diff"
        command: "while bonsoir || bonnenuit; do thx; if matin; then butwtf; elif jour; then butearly; else verymuch; fi done"
        expected:
                stdout: "WHILE -> WORD -> LOGICAL_OR -> WORD -> SEMICOLON -> DO -> WORD -> \
                        SEMICOLON -> IF -> WORD -> SEMICOLON -> THEN -> WORD -> SEMICOLON -> ELIF -> WORD \
                        -> SEMICOLON -> THEN -> WORD -> SEMICOLON -> ELSE -> WORD -> SEMICOLON -> FI -> DONE \
                        -> ENDOF -> \n"
                rvalue: 0
do_while:
        type: "lexer diff"
        command: "do echo word2 p=1; while cond"
        expected:
                stdout: "DO -> WORD -> WORD -> WORD -> SEMICOLON -> WHILE -> WORD -> \
                         ENDOF -> \n"
                rvalue: 0
while_loop:
        type: "lexer diff"
        command: "while true; do foo; sleep 2; done"
        expected:
                stdout: "WHILE -> WORD -> SEMICOLON -> DO -> WORD -> SEMICOLON -> WORD -> WORD -> SEMICOLON -> DONE -> ENDOF -> \n"
                rvalue: 0
pipe_test:
        type: "lexer diff"
        command: "cat | echo hello"
        expected:
                stdout: "WORD -> PIPE -> WORD -> WORD -> ENDOF -> \n"
                rvalue: 0
logical_and_and:
        type: "lexer diff"
        command: "hello && & bye"
        expected:
                stdout: "WORD -> LOGICAL_AND -> AMPERSAND -> WORD -> ENDOF -> \n"
                rvalue: 0
pipe_and_logical_or:
        type: "lexer diff"
        command: "echo hello || bye | cat"
        expected:
                stdout: "WORD -> WORD -> LOGICAL_OR -> WORD -> PIPE -> WORD -> ENDOF -> \n"
                rvalue: 0

word_and_word_semi:
        type: "lexer diff"
        command: "hello& bye;"
        expected:
                stdout: "WORD -> AMPERSAND -> WORD -> SEMICOLON -> ENDOF -> \n"
                rvalue: 0

random_complex_1:
        type: "lexer diff"
        command: "while echo lol; do echo hello;echo bye; done; pwd"
        expected:
                stdout: "WHILE -> WORD -> WORD -> SEMICOLON -> DO -> WORD -> WORD -> SEMICOLON -> WORD -> WORD -> SEMICOLON -> DONE -> SEMICOLON -> WORD -> ENDOF -> \n"
                rvalue: 0
semicolon_split:
        type: "lexer diff"
        command: "if pwd;then echo lol;fi"
        expected:
                stdout: "IF -> WORD -> SEMICOLON -> THEN -> WORD -> WORD -> SEMICOLON -> FI -> ENDOF -> \n"
                rvalue: 0

ampersand_split:
        type: "lexer diff"
        command: "&ls"
        expected:
                stdout: "AMPERSAND -> WORD -> ENDOF -> \n"
                rvalue: 0

parenthesis_split:
        type: "lexer diff"
        command: "case_condition)"
        expected:
                stdout: "WORD -> CLOSE_PAR -> ENDOF -> \n"
                rvalue: 0

parenthesis_simple:
        type: "lexer diff"
        command: "(word)"
        expected:
                stdout: "OPEN_PAR -> WORD -> CLOSE_PAR -> ENDOF -> \n"
                rvalue: 0

brackets_split:
        type: "lexer diff"
        command: "word{"
        expected:
                stdout: "WORD -> OPEN_BRA -> ENDOF -> \n"
                rvalue: 0

brackets_split_simple:
        type: "lexer diff"
        command: "{case_condition}"
        expected:
                stdout: "OPEN_BRA -> WORD -> CLOSE_BRA -> ENDOF -> \n"
                rvalue: 0
